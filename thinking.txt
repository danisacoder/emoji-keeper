What am I trying to do?

Instead of rendering the array in the text field, I now need to isolate each emoji so that it can be given location information.

I think this also means I need to define a different HTML element to contain it, so that each element can be positioned differently.

This might be best accomplished with an object, so that the key value pairs are "emoji", "position info".

emojiObject {
  emoji1:"positionNumber",
  emoji2: "positionNumber",
  emoji3, "positionNumber"
}

So, whenever I generate a random Emoji, I also need to generate a random positionNumber and store that in the object as well.

Then, I would want to render that object, pushing that location data in to the rendering function.

But each emoji should get its OWN html element, so that it can have its own z index (get stacked up like a sticker). So how do I generate that? What is the format?

var div = document.CreateElement(div(#)) - the # needs to increment once for every emoji in the object

div.textContent = getRandomEmoji()

document.body.appendChild(div)

---------------

Okay, so I changed the emoji object into an array. Now I need to use the format above and put it in the renderEmojis function. That's my next step.

---------

So, the emoji stickers work. Now I want to add:

- sound effect each time sticker added
  - bonus - slightly different sound effects for variety (2-3)
- more detailed animation before each sticker hits (shadow before it lands)
- sticker size varieties (the emoji can change with font size, but I'm not sure how to tie that to the size of the div... UNLESS you have a few set sizes, like, small, medium, and large; then you can trigger the appropriate div size for the font size :) smart)
- DONE fix the overflow

-----------

7-29

This just doesn't work. But that's okay. I have learned something that won't work, so now I can find something that WILL.

The way that I'm positioning with percentages seems to work with the logo and columns and such, but NOT with positioning; the pieces slide around slightly, come apart, and just don't look like an intentional line.

So I need to find a new way to handle that.

-----------

8-24

Back at it! Determining boundary percentages that won't break the page (slide the stickers off the notebook).

horizontal: 1-85%
top: 1-85%

The emojis need to shrink a bit to fit things like the "the wave" and other emojis fully on the sticker (which can also grow a bit).

8-23

- What is the MVP of this project? How do I know when it's done? What am I learning? What do I want to achieve?

- Can I add an API to this for the Emojis instead of hard-coding?

-----

8-26-21

Things to do:

- research and implement emoji API
- finish layout and design
  - paper text and prices and such
  - emoji-adding button placement and design
  - lighter font weight for instructions
- animation
  - make the stickers look like they are "falling" from the sky or at least "landing" from above
- sound
  - adding sticker sound effectx
- mobile
  - does it work? does it look good?

-----------

10-9-21

Things to do:

- change font sizes using vw (they get too large when the page gets wide)
  - sticker
  - row3 h3
  - row3 p
  - p.instructions
  - .clasp-lip (the borders)
- DONE make "clear" button more, uh, clear that you've clicked it (text doesn't change, stays the same color)
- DONE use the stuff from the carousel to make the sticker animate (having one sticker be "active" class at a time)
- different sticker sizes (probably tied to the view width thing - it'll be easier to randomize and adjust their size when I know what I'm using to size them in the first place)

